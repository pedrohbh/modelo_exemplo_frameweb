package {{ package.Name }};

import javax.ejb.EJB;
import javax.ejb.Stateless;
import javax.annotation.Resource;
import javax.ejb.SessionContext;
import javax.ejb.Stateless;
import javax.inject.Inject;
import javax.enterprise.event.Event;
import javax.annotation.security.RolesAllowed;

/** TODO: generated by FrameWeb. Should be documented. */
@Stateless
{% if class.PermissionName is not null %}
	@RolesAllowed("{{class.PermissionName}}")
{% endif %}
public class {{ class.Name }} {% if generalizations is not empty %}extends {{ ((generalizations[0]).GeneralizationSets[0]).Name }} {% endif %}implements {{ class.Name | replace({'Bean': '', 'Impl': ''}) }} {
	/** Serialization id (using default value, change if necessary). */
	private static final long serialVersionUID = 1L;

	@Resource
	private SessionContext sessionContext;

	{% for association in associations %}
	/** TODO: generated by FrameWeb. Should be documented. */
	@EJB
	private {{ association.TargetMember.Type.Name }} {{ association.TargetMember.Type.Name | lower_first }};
	{% endfor %}
	
	{% for attribute in attributes %}
	/** TODO: generated by FrameWeb. Should be documented. */
	private {{ attribute.Type.Name }} {{ attribute.Name }};
	{% endfor %}

	{% for attribute in attributes %}	
	/** Getter for {{ attribute.Name }}. */
	public {{ attribute.Type.Name }} get{{ attribute.Name | title }}() {
		return {{ attribute.Name }};
	}
	
	/** Setter for {{ attribute.Name }}. */
	public void set{{ attribute.Name | title }}({{ attribute.Type.Name }} {{ attribute.Name }}) {
		this.{{ attribute.Name }} = {{ attribute.Name }};
	}
	{% endfor %}
	
	{% for method in methods %}
	/** TODO: generated by FrameWeb. Should be documented. */
	@Override
	{{ method.Visibility.Name }} {% if method.MethodType is null %}void{% else %}{{ method.MethodType.Name }}{% endif %} {{ method.Name }}({% for parameter in method.OwnedParameters %}{{ parameter.Type.Name }} {{ parameter.Name }}{% if loop.last == false %}, {% endif %}{% endfor %}) {
		// FIXME: auto-generated method stub
		return{% if method.MethodType is not null %} null{% endif %};
	}
	{% endfor %}

	@Override
	public void login(String username, String password) {
		// TODO Auto-generated method stub
		
		try {
			/**get user from dao  */
			User user = new User();
			
			// Creates the MD5 hash of the password for comparison.
			String md5pwd = TextUtils.produceBase64EncodedMd5Hash(password);

			// Checks if the passwords match.
			String pwd = user.getPassword();
			
			if ((pwd != null) && (pwd.equals(md5pwd))) {
				User currentUser = user;
				pwd = null;
				
				System.out.println("Authentication sucess...");
				// Fires a login event.
				
			}
			
			
		} catch (NoSuchAlgorithmException | UnsupportedEncodingException e) {
			// TODO Auto-generated catch block
			System.out.println(e);
			return;
		}

		
		
	}


	/** Return User */
	@Override
	public User getCurrentUser() {
	   return null;
	}
	

}
