package {{ package.Name }};

import javax.ejb.EJB;
import javax.enterprise.inject.*;
import br.ufes.inf.nemo.jbutler.ejb.controller.JSFController;

/** TODO: generated by FrameWeb. Should be documented. */
@Model
public class {{ class.Name }} extends JSFController {
	/** Serialization id (using default value, change if necessary). */
	private static final long serialVersionUID = 1L;

	{% for association in associations %}

	{% if association.TargetMember.Type.Name is not null %}
	/** TODO: generated by FrameWeb. Should be documented. */
	@EJB
	private {{ association.TargetMember.Type.Name }} {{ association.TargetMember.Type.Name | lower_first }};
	{% endif %}

	{% endfor %}

	{% for attribute in attributes %}
	/** TODO: generated by FrameWeb. Should be documented. */
	private {{ attribute.Type.Name }} {{ attribute.Name }};
	{% endfor %}

	{% for method in methods %}
		{% if method.Name == "login" %}
	private User currentUser;
		{% endif %}
	{% endfor %}
	
	{% for method in methods %}
		{% if method.Name == "login" %}
			/** TODO: generated by FrameWeb. Should be documented. */
			public String login() {
				try {
					// Uses the Session Information bean to authenticate the user.
					loginService.login(J_username, J_password);

					// Also authenticates on JAAS.
					// FIXME: is there a way to do this at the application package (in the EJB)?
					try {
						HttpServletRequest request = (HttpServletRequest) FacesContext.getCurrentInstance().getExternalContext().getRequest();
						request.login(J_username, J_password);
					}
					catch (Exception e) {
						return null;
					}
				}
				catch (Exception e) {
				
					return null;
				}

				// If everything is OK, stores the current user and redirects back to the home screen.
				currentUser = loginService.getCurrentUser();
				return "core/index.xhtml?faces-redirect=true";
			}
		{% else %}
			/** TODO: generated by FrameWeb. Should be documented. */
			{{ method.Visibility.Name }} {% if method.MethodType is null %}void{% else %}{{ method.MethodType.Name }}{% endif %} {{ method.Name }}({% for parameter in method.OwnedParameters %}{{ parameter.Type.Name }} {{ parameter.Name }}{% if loop.last == false %}, {% endif %}{% endfor %}) {
				// FIXME: auto-generated method stub
				return{% if method.MethodType is not null %} null{% endif %};
			}
		{% endif %}
	{% endfor %}
	
	{% for attribute in attributes %}
	/** Getter for {{ attribute.Name }}. */
	public {{ attribute.Type.Name }} get{{ attribute.Name | capitalize }}() {
		return {{ attribute.Name }};
	}

	/** Setter for {{ attribute.Name }}. */
	public void set{{ attribute.Name | capitalize }}({{ attribute.Type.Name }} {{ attribute.Name }}) {
		this.{{ attribute.Name }} = {{ attribute.Name }};
	}
	{% endfor %}

}
